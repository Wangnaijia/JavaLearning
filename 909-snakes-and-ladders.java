/*
 * @Author: Wang Naijia
 * @Date: 2021-06-27 09:47:42
 * @LastEditors: Wang Naijia
 * @LastEditTime: 2021-06-27 10:14:30
 * @Descripttion: N x N 的棋盘 board 上，按从 1 到 N*N 的数字给方格编号，编号 从左下角开始，每一行交替方向。

例如，一块 6 x 6 大小的棋盘，编号如下：
[
    [36,35,34,33,32,31],
    [25,26,27,28,29,30],
    [24,23,22,21,20,19],
    [13,14,15,16,17,18],
    [12,11,10,,9,,8,,7],
    [ 1, 2, 3, 4, 5, 6]]

r 行 c 列的棋盘，按前述方法编号，棋盘格中可能存在 “蛇” 或 “梯子”；如果 board[r][c] != -1，那个蛇或梯子的目的地将会是 board[r][c]。
玩家从棋盘上的方格 1 （总是在最后一行、第一列）开始出发。
每一回合，玩家需要从当前方格 x 开始出发，按下述要求前进：
选定目标方格：选择从编号 x+1，x+2，x+3，x+4，x+5，或者 x+6 的方格中选出一个目标方格 s ，目标方格的编号 <= N*N。
该选择模拟了掷骰子的情景，无论棋盘大小如何，你的目的地范围也只能处于区间 [x+1, x+6] 之间。
传送玩家：如果目标方格 S 处存在蛇或梯子，那么玩家会传送到蛇或梯子的目的地。否则，玩家传送到目标方格 S。 
注意，玩家在每回合的前进过程中最多只能爬过蛇或梯子一次：就算目的地是另一条蛇或梯子的起点，你也不会继续移动。
返回达到方格 N*N 所需的最少移动次数，如果不可能，则返回 -1。

示例：
    输入：[
    [-1,-1,-1,-1,-1,-1],
    [-1,-1,-1,-1,-1,-1],
    [-1,-1,-1,-1,-1,-1],
    [-1,35,-1,-1,13,-1],
    [-1,-1,-1,-1,-1,-1],
    [-1,15,-1,-1,-1,-1]]
    输出：4
    解释：
        首先，从方格 1 [第 5 行，第 0 列] 开始。
        你决定移动到方格 2，并必须爬过梯子移动到到方格 15。
        然后你决定移动到方格 17 [第 3 行，第 5 列]，必须爬过蛇到方格 13。
        然后你决定移动到方格 14，且必须通过梯子移动到方格 35。
        然后你决定移动到方格 36, 游戏结束。
        可以证明你需要至少 4 次移动才能到达第 N*N 个方格，所以答案是 4。
提示：
    2 <= board.length = board[0].length <= 20
    board[i][j] 介于 1 和 N*N 之间或者等于 -1。
    编号为 1 的方格上没有蛇或梯子。
    编号为 N*N 的方格上没有蛇或梯子。
解题思路：
    我们可以将棋盘抽象成一个包含 N^2个节点的有向图，对于每个节点 x，若x+i (1≤i≤6) 上没有蛇或梯子，则连一条从 x 到 x+i 的有向边；否则记蛇梯的目的地为 y，连一条从 x 到 y 的有向边。
    如此转换后，原问题等价于在这张有向图上求出从 1 到 N^2的最短路长度。

    对于该问题，我们可以使用广度优先搜索。将节点编号和到达该节点的移动次数作为搜索状态，顺着该节点的出边扩展新状态，直至到达终点 N^2，返回此时的移动次数。若无法到达终点则返回 −1。

    代码实现时，我们可以用一个队列来存储搜索状态，初始时将起点状态 (1,0) 加入队列，表示当前位于起点 1，移动次数为 0。然后不断取出队首，每次取出队首元素时扩展新状态，即遍历该节点的出边，若出边对应节点未被访问，则将该节点和移动次数加一的结果作为新状态，加入队列。如此循环直至到达终点或队列为空。

    此外，我们需要计算出编号在棋盘中的对应行列，以便从 board 中得到目的地。设编号为 id，由于每行有 n 个数字，其位于棋盘从下往上数的第 行，记作 r。由于棋盘的每一行会交替方向，若 r 为偶数，则编号方向从左向右，列号为  ；若 r 为奇数，则编号方向从右向左，列号为 。
 */
import java.util.*;
class Solution909 {
    int[] map = {36,35,34,33,32,31,25,26,27,28,29,30,24,23,22,21,20,19,13,14,15,16,17,18,12,11,10,9,8,7,1,2,3,4,5,6};
    public static void main(String[] args) {
        int[][] s = {{-1,-1,-1,-1,-1,-1},
                    {-1,-1,-1,-1,-1,-1},
                    {-1,-1,-1,-1,-1,-1},
                    {-1,35,-1,-1,13,-1},
                    {-1,-1,-1,-1,-1,-1},
                    {-1,15,-1,-1,-1,-1}};
        Solution909 solution = new Solution909();
        int res = solution.snakesAndLadders(s);
        System.out.println(res);
    }
    public int snakesAndLadders(int[][] board) {
        int n = board.length;
        boolean[] vis = new boolean [n * n + 1];
        Queue<int[]> queue = new LinkedList<int[]>();
        queue.offer(new int[] {1,0}); // 记录当前格子的数值和经过的步数
        while (!queue.isEmpty()){
            int [] p = queue.poll();
            for(int i = 1; i<=6; ++i){ // 求出下一次能到达的位置
                int nxt = p[0] + i;
                if(nxt > n*n){
                    break; // 超出边界
                }
                int rc[] = id2rc(nxt, n); // 得到下一步的行列
                if(board[rc[0]][rc[1]] > 0){
                    // 存在snake or ladder
                    nxt = board[rc[0]][rc[1]];
                }
                if(nxt == n*n) return p[1]+1;
                if(!vis[nxt]){
                    vis[nxt] = true;
                    queue.offer(new int[] {nxt, p[1]+1}); // 扩展新状态
                }
            }
        }
        return -1;
    }
    
    public int[] id2rc(int id, int n){
        int r = (id - 1) / n, c = (id - 1) % n;
        if (r%2 == 1){
            // 奇数行
            c = n - 1 - c;  // 列下标翻转
        }
        return new int[]{ n - 1 - r, c }; // 行下标翻转
    }
}
